---
- name: Prep for Remote Provision
  hosts: localhost
  gather_facts: false
  connection: local
  tasks:
  - name: Create unique storage ID
    set_fact:
      storage_UID: "{{ lookup('password', '/dev/null length=12 chars=ascii_lowercase,digits') }}"
      secret_mnt: "/etc/apb-secrets/apb-bkup-nfs-pv-params"
      mode: provision

  - name: Get serviceInstance name
    shell: oc -n "{{ namespace }}" get serviceinstance -o json | jq -r '.items[] | select(.spec.externalID == "{{ _apb_service_instance_id }}") | .metadata.name'
    register: _svcInstanceName
    changed_when: false

  - name: Label serviceInstance with storage_UID
    shell: oc -n "{{ namespace }}" label serviceInstance "{{ _svcInstanceName.stdout }}" storage_UID="{{ storage_UID }}"

  - name: "[Provision] Stage"
    include_tasks: stage.yml


- name: Provision NFS
  hosts: nfs_server
  remote_user: "{{ hostvars['localhost']['remote_user'] }}"
  become: true
  pre_tasks:
  - name: Carry over vars from initial play
    set_fact:
      mode: provision
      pvol_name: "{{ hostvars['localhost']['pvol_name'] }}"
      pvol_size: "{{ hostvars['localhost']['pvol_size'] }}"
      backup_storage_nfs_server: "{{ hostvars['localhost']['backup_storage_nfs_server'] }}"
      backup_storage_nfs_root: "{{ hostvars['localhost']['backup_storage_nfs_root'] }}"
      backup_storage_volumegroup: "{{ hostvars['localhost']['backup_storage_volumegroup'] }}"
      backup_storage_thinpool: "{{ hostvars['localhost']['backup_storage_thinpool'] }}"
  roles:
  - role: thin-nfs-export


- name: Provision PV-PVC
  hosts: localhost
  gather_facts: false
  connection: local
  vars:
    state: 'present'
    mode: 'provision'
  roles:
  - role: ansible.kubernetes-modules
    install_python_requirements: no
  - role: ansibleplaybookbundle.asb-modules
  - role: backup_pvc
    playbook_debug: true
...
